name: nest-ci

on:
  push:
    branches: [ master ]

permissions: 
  id-token: write
  contents: read

defaults:
  run:
    working-directory: nestjs-docker-optimized

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node: [18, 20]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      # - name: Setup Node | ${{ matrix.node }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          # node-version: ${{ matrix.node }}
          node-version: 20
          cache: pnpm
          cache-dependency-path: nestjs-docker-optimized/pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Test 
        run: pnpm run test

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::292659699009:role/ecr-role

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build docker image
        id: build-docker-image
        env:
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          TAG: ${{ steps.generate_tag.outputs.sha }}
        run: |
          docker build -t $REGISTRY/nest-ci:$TAG .
          docker push $REGISTRY/nest-ci:$TAG
          docker tag $REGISTRY/nest-ci:$TAG $REGISTRY/nest-ci:latest
          docker push $REGISTRY/nest-ci:latest
          IMAGE=$(echo $REGISTRY/nest-ci:$TAG)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Deploy to app runner
        id: deploy-app-runner
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: nest-ci-api
          image: ${{ steps.build-docker-image.outputs.image }}
          access-role-arn: arn:aws:iam::292659699009:role/app-runner-role-ci
          region: us-east-2
          cpu: 1
          memory: 2
          port: 3000
          wait-for-service-stability-seconds: 900

      - name: App Runner check
        run: echo "App Runner running... ${{ steps.deploy-app-runner.outputs.service-url }}"

